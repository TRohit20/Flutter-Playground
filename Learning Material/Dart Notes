Dart is a Object oriented programming language. 
It is the base programming language used to build in flutter.

Each language has their own set of keywords. These are speacial words reserved by the language which are used to do certain function. You can make it understand what you wanna do using them.

Data types are the types of data that are to be stored such as integers, characters etc. 

Constants are usually values which cannot be changed or vary. Compile time or run-time, constants value doesnt change. 

Functions are piece of code that hold your logic so you dont have to write it again and again.

Dart is a lot similar to Java and javascript. If you have experience with them like I do, it just gets easier to learn. BUT IT IS NOT MANDATORY!

Dart Control Statements and Collections:
If and else are conditional statements used in Dart. Meaning these are keywords used to assert a condition like if the condition is true, it'll execute the body. They are a control statement.
You can have multiple if statements or else if statements too. 

Dart executes line by line. Please keep it in mind as you decide your layout and code hierachy.

Operators are usually of three types: Prefix, postfix and suffix. (refer to code examples).
You can also create your own operators or overide operators using classes and objects. We will dive into it in some while.

It is useful to know that dart is a language that has certain exceptions written.

Lists in dart:
A data structure that stores similar data i.e homogenous data. Data of the same type. 
You can initalise them using the square brackets.
It is also very important to know that the indexes of lists in dart or pretty much all programming languages start with 0 and not 1!
Lists also have a range of methods or functions available such as length of list etc
*** 
But how do you extract those methods? You use '.'
'.' is used to draw the methods or functions available, to access a object or property etc.
It is basically used to bind instance methods with ref variables or so.

Sets in Dart:
it is a list of unique things meaning a data structure that can store and hold data of different types such as strings, integer etc.
It is initialised using flower brackets '{}'
Set allows you to create a unique set of list.

Maps in Dart:
Maps are data structures that are used to hold key-value pairs of information similar to dictionaries in python(Pretty much same).
Let us say you are storing a human's data such as age, name, gender, height etc
The above are keys(properties of a human). Now, they have values right? Hence the key-value pair.
key inside a map need to be unique.
You initialise a map using flower brackets but in this way: 
** ref_var = {'property_name':'value','property_name':'value'};

***** NULL SAFETY: Very important topic in Dart, Swift and Rust and other languages!
In programming language we are allowed to have the absence of a value. For example you have a variable, you can tell that this variable can either store a certain data or for its lifetime be nothing(No value).
That right there, having no value or nothing is called Null.
It is a keyword used to indicate the absence of a value.

In Dart, this is called Sound Null safety.
Null safety prevents errors that result from unintentional access of variables set to null. For example, if a method expects an integer but receives null, your app causes a runtime error. This type of error, a null dereference error, can be difficult to debug.
You can make any type nullable by using a questionmark after the datatype like this:
EG: String? ref_var = null;
A good example with explanation in code in test.dart file under the nullSafetyCheck() function.
You can also call them optional 
In case, you wanna migrate your code or package to new code that supports null safety. You can check out how that's done using the official dart documentation.

Null safety principles
Dart null safety support is based on the following three core design principles:

Non-nullable by default. Unless you explicitly tell Dart that a variable can be null, it’s considered non-nullable. This default was chosen after research found that non-null was by far the most common choice in APIs.

Incrementally adoptable. You choose what to migrate to null safety, and when. You can migrate incrementally, mixing null-safe and non-null-safe code in the same project. We provide tools to help you with the migration.

Fully sound. Dart’s null safety is sound, which enables compiler optimizations. If the type system determines that something isn’t null, then that thing can never be null. Once you migrate your whole project and its dependencies to null safety, you reap the full benefits of soundness—not only fewer bugs, but smaller binaries and faster execution.

Cherry picking non null values: We use the '??' operator for this.
You can ask the language to give you the values that are not null or not absent
?? is  infix operator. It picks either the left or right side which is not null. 
It's the same implementation in Swift

Null-aware assignment operator: ??=
It is very similar to ?? and tries to resolve a variable is not null. Tries its best.
We dont use this often. But basically what it does is it checks if the variable is null or not. You can learn more about it and in a better way by using google or YT. It can get little confusing.

Conditional invocation: ?.
WE use this operator to conditionally invoke a method or property. 
We saw this earlier that we can draw methods or properties from a class using '.'
So, how do you draw properties from a nullable object?

There are many cases where you have to work with null or null safety.

It is good convention to use 'this' keyword.

From the specific notes I have already provided you are now familiar with constructors.
They allow us to create different instances of our classes. We can specify which parameters the class should depend on when it is being instantiated and hide inner initialization logic.
We can have many constructors for different use cases or we can rely on the default one.
In Dart, constructors play a similar role but have several variations that do not exist in most programming languages. We will go over the different use cases and examples of constructors in Dart. 

In other languages, it is possible to overload your constructor. This means that you can have different constructors with the same name but with a varying signature (or a different set of arguments).
In Dart, this is not possible, but there is a way around it. It is called named constructors. Giving your constructors different names allows your class to have many constructors and also to better represent their use cases outside of the class.

A factory constructor is a constructor that can be used when you don’t necessarily want a constructor to create a new instance of your class.
This might be useful if you hold instances of your class in memory and don’t want to create a new one each time (or if the operation of creating an instance is costly).
Another use case is if you have certain logic in your constructor to initialize a final field that cannot be done in the initializer list.

Advanced Constructors
Dart also allows you to create constant constructors. What does this mean exactly? If your class represents an object that will never change after its creation, you can benefit from the use of a constant constructor. You have to make sure that all your class fields are final.

When you want one constructor to call another constructor under the hood, it’s referred to as redirecting constructors.

When you want one constructor to call another constructor under the hood, it’s referred to as redirecting constructors.

Enums: 
Group of variables that you cannot change(Like a constant)
For a particular class, you will need only particular no. of objects only

The naming convention for enums is that the 1st letter should always be Capital for all variables etc.
Enums are supposed to be the top level. They cannot be inside a class
Switch is the way usually used in order to work with enums

Abstract classes are classes that can contain logic too. They cannot be instantiated.
It has utilities etc that only other classes can make use of!
** Abstract classes in Dart are used for defining interfaces often with some implementation.

Factory constructor is a constructor that can be used when you don't necessarily want a constructor to create a new instance of your class.

This might be useful if you hold instances of your class in memory and don't want to create a new one each time
It's like a factory(Can produce many at a time)
Let's say you have a logic or instance that is being created or called in the same manner, you can create a factory constructor for such purposes.
Remember that factory constructors can return instances that are not of the same class!
Another use case is if you have certain logic in your constructor to initialize a final field that cannot be done in the initializer list.

Custom Operators: 
An operator that is used to override the ability of your class to be compared to or perform operations with your own logic.
Suppose overriding a '==' operator in your class.
We use the Override annotation is used to do so at the class level.

Covariant keyword:
It basically says that forget what the super class has defined as the type for the function to take in, in our case, we are sure that the value we need in this function is actually of this type.  This is mandatory.

Hashcode:
A special number or identifiers that is assigned to instance of classes that is then used inside a Map or set. Then it is through hashcode that dart knows that the values are unique or so.
A hash code is a single integer which represents the state of the object that affects operator == comparisons.

All objects have hash codes. The default hash code implemented by Object represents only the identity of the object, the same way as the default operator == implementation only considers objects equal if they are identical (see identityHashCode).

If operator == is overridden to use the object state instead, the hash code must also be changed to represent that state, otherwise the object cannot be used in hash based data structures like the default Set and Map implementations.

Hash codes must be the same for objects that are equal to each other according to operator ==. The hash code of an object should only change if the object changes in a way that affects equality. There are no further requirements for the hash codes. They need not be consistent between executions of the same program and there are no distribution guarantees.

Objects that are not equal are allowed to have the same hash code. It is even technically allowed that all instances have the same hash code, but if clashes happen too often, it may reduce the efficiency of hash-based data structures like HashSet or HashMap.

If a subclass overrides hashCode, it should override the operator == operator as well to maintain consistency.

Extensions: (The official documentation of dart has amazing explanation)
Adding logic to existing classes
You are basically extending the functionality of a existing class or adding a new one.
We use the 'extension' keyword 
WHen you need to add a functionality but it does not really belong or fit in the class itself but it may belong or required in current working source code.

Getter and Setter Methods:
Getter and setter methods are the class methods used to manipulate the data of the class fields. Getter is used to read or get the data of the class field whereas setter is used to set the data of the class field to some variable.

Getter method is used to retrieve a particular class field and save it in a variable. All classes have a default getter method but it can be overridden explicitly. The getter method can be defined using the get keyword.
its like a property that can only be read from but cannot be written to

Setter Method isused to set the data inside a variable received from the getter method. All classes have a default setter method but it can be overridden explicitly. The setter method can be defined using the set keyword 

Futures:
As the name suggests, it's used for data to be returned in the future or after sometime which is part of asynchronous programming.

What are synchronous and asynchronous tasks?
Synchronous is when a task is executed when you ask for it and it returns with data when you do immediately
While asynchronous tasks are tasks which will return values but not immediately. It'll take some time.

Another way to put this is: 
In synchronous programming, you have to wait for current task to complete in order to move on to the next one. While in asynchronous programming, You can move on to the next task as the currrent one is executed.

So you use 'future' in dart for asynchronous programming.

But to use future or asynchronous programming, you need understand about async/await
The mechanism of controlling the flow of data

Async and Await:
They are both very related but different.
Async in dart is a keyword that marks a function or method as asynchronous!
Meaning that a function that is declared asynchronous, it can have a logic that doesnt necessarily have to return data or values immediately
or it can internally call other funcs that do asynchronous work.

When you do this, you are returning the future but not the value. So how do you get the data back?
We do that by prefixing the func with the keyword await.

What does await do?
As the name suggests it literally waits for the data to return before it moves onto the next statement or line.

So they are related. You cannot use await without async-ing the function per say. 
Logical isn't it?

Futures are often used for APIs that are implemented using a different thread or isolate 